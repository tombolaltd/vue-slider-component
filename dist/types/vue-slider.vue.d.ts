import { cssSize, cssStyleDefinition, eventType, formatterFunction, numberRange, tooltipDirection, tooltipVisibility } from './types';
import { Vue } from 'vue-property-decorator';
import { IAdHocData } from './interfaces/ad-hoc-data';
import { IEventPosition } from './interfaces/event-position';
export default class VueSliderComponent extends Vue {
    adHocData: IAdHocData[];
    containerStyle: cssStyleDefinition;
    clickable: boolean;
    data: any[] | null;
    debug: boolean;
    disabled: boolean;
    dotStyle: cssStyleDefinition;
    eventType: eventType;
    formatter: string | formatterFunction;
    height: cssSize;
    interval: number;
    labelStyle: cssStyleDefinition;
    lazy: boolean;
    min: number;
    max: number;
    progressBarStyle: cssStyleDefinition;
    realTime: boolean;
    reverse: boolean;
    showAdHoc: boolean;
    show: boolean;
    showDots: boolean;
    showItemLabel: boolean;
    speed: number;
    stopPropagation: boolean;
    thumbHeight: number | null;
    thumbSize: number;
    thumbStyle: cssStyleDefinition;
    thumbWidth: number | null;
    tooltip: tooltipVisibility;
    tooltipDir: tooltipDirection | null;
    tooltipStyle: cssStyleDefinition;
    trackStyle: cssStyleDefinition;
    value: number;
    width: cssSize;
    private currentValue;
    private movingFlag;
    private isComponentExists;
    private size;
    private progressBar;
    private root;
    private thumb;
    private track;
    private xScale;
    constructor();
    readonly currentIndex: number;
    readonly getInterval: number;
    readonly gapWidth: number;
    readonly isDisabled: boolean;
    readonly limit: numberRange;
    readonly minimum: number;
    readonly maximum: number;
    readonly position: number;
    readonly sliderContainerHeight: number;
    readonly sliderContainerWidth: number;
    readonly thumbWidthVal: number;
    readonly thumbHeightVal: number;
    readonly total: number;
    val: number;
    readonly valueLimit: numberRange;
    private readonly disabledClass;
    private readonly flowDirection;
    private readonly getContainerStyle;
    private readonly getDotStyle;
    private readonly getProgressBarStyle;
    private readonly getThumbStyle;
    private readonly getTooltipStyle;
    private readonly getTrackStyle;
    private readonly itemContainerStyle;
    private readonly itemModels;
    private readonly multiple;
    private readonly showAdHocData;
    private readonly thumbOffsetStyle;
    private readonly tooltipClass;
    private readonly tooltipDirection;
    private readonly tooltipStatusClass;
    private readonly trackContainerStyle;
    onMaxChange(val: number): void;
    onMinChange(val: number): void;
    onShowChanged(val: boolean): void;
    onValueChanged(val: number): void;
    getItemPosition(event: IEventPosition): number;
    setIndex(val: number, skipPositionSet?: boolean): void;
    setValue(val: number, noCallback?: any, speed?: number): void;
    getValue(): number;
    getIndex(): number;
    refresh(): void;
    mounted(): void;
    beforeDestroy(): void;
    private bindEvents();
    private unbindEvents();
    private convertIndexToValue(index);
    private formatting(value);
    private isDiff(a, b);
    private limitValue(val);
    private printError(msg);
    private onAdHocClicked(val, $event);
    private onTrackClick(e);
    private onMoveStart(e, index);
    private onMouseMove(event);
    private onTouchMove(event);
    private onMoveEnd(event);
    private setPosition(speed?);
    private setTransform(position);
    private setTransitionTime(time);
    private setValueOnPos(pos, isDrag?);
    private syncValue(noCallback?);
    private unpackStyle(definition);
    private updateThumbStyle();
    private updateTrackSize();
}
