export declare type cssSize = number | string;
export declare type eventType = 'auto' | 'none';
export declare type formatterFunction = (val: number) => string;
export declare type numberRange = [number, number];
export declare type style = object | any[];
export declare type styleFunction = (val: number, index: number) => CSSStyleDeclaration;
export declare type tooltipVisibility = 'hover' | 'always' | boolean;
export declare type tooltipDir = 'top' | 'bottom' | 'left' | 'right';
export declare type VueElement = Vue & HTMLElement;
export interface IEventPosition {
    readonly clientX: number;
    readonly clientY: number;
    readonly pageX: number;
    readonly pageY: number;
    readonly screenX: number;
    readonly screenY: number;
    readonly target: EventTarget;
}
import { Vue } from 'vue-property-decorator';
export default class VueSliderComponent extends Vue {
    offset: number;
    flag: boolean;
    size: number;
    currentValue: number;
    isComponentExists: boolean;
    width: cssSize;
    height: cssSize;
    data: any[] | null;
    dotSize: number;
    dotWidth: number | null;
    dotHeight: number | null;
    min: number;
    max: number;
    interval: number;
    show: boolean;
    disabled: boolean;
    piecewise: boolean;
    tooltip: tooltipVisibility;
    eventType: eventType;
    reverse: boolean;
    lazy: boolean;
    clickable: boolean;
    speed: number;
    realTime: boolean;
    stopPropagation: boolean;
    value: number;
    piecewiseLabel: boolean;
    debug: boolean;
    sliderStyle: style | styleFunction | null;
    tooltipDir: tooltipDir | null;
    formatter: string | formatterFunction;
    piecewiseStyle: object;
    progressBarStyle: object;
    bgStyle: object;
    tooltipStyle: style | styleFunction | null;
    labelStyle: object;
    labelActiveStyle: object;
    private slider;
    private sliderContainer;
    private progressBar;
    constructor();
    readonly dotWidthVal: number;
    readonly dotHeightVal: number;
    readonly flowDirection: string;
    readonly tooltipDirection: tooltipDir;
    readonly tooltipStatus: string;
    readonly tooltipClass: [string, string];
    readonly isDisabled: boolean;
    readonly disabledClass: string;
    readonly sliderContainerStyle: CSSStyleDeclaration;
    readonly sliderContainerHeight: number;
    readonly sliderContainerWidth: number;
    readonly minimum: number;
    val: number;
    readonly currentIndex: number;
    readonly indexRange: numberRange;
    readonly maximum: number;
    readonly multiple: number;
    readonly spacing: number;
    readonly total: number;
    readonly gap: number;
    readonly position: number;
    readonly limit: numberRange;
    readonly valueLimit: numberRange;
    readonly wrapStyles: style;
    readonly sliderStyles: style | null;
    readonly sliderOffsetStyle: style;
    readonly tooltipStyles: style | null;
    readonly elemStyles: style;
    readonly piecewiseDotStyle: style;
    readonly piecewiseDotWrap: Array<{
        currentStyle: style;
        label: string;
    }> | boolean;
    onValueChanged(val: number): void;
    onMaxChange(val: number): void;
    onMinChange(val: number): void;
    onShowChanged(val: boolean): void;
    updateSliderStyle(): void;
    bindEvents(): void;
    unbindEvents(): void;
    formatting(value: any): string;
    getPos(e: IEventPosition): number;
    wrapClick(e: IEventPosition): boolean;
    onMoveStart(e: UIEvent, index: number): void;
    onMouseMove(event: MouseEvent): void;
    onTouchMove(event: TouchEvent): void;
    onMoveEnd(event: UIEvent): void;
    setValueOnPos(pos: number, isDrag?: boolean): void;
    isDiff(a: any, b: any): boolean;
    setCurrentValue(val: number, skipPositionSet?: boolean): boolean;
    setIndex(val: number): void;
    setValue(val: number, noCallback?: any, speed?: number): void;
    setPosition(speed?: number): void;
    setTransform(position: number): void;
    setTransitionTime(time: number): void;
    limitValue(val: number): any;
    syncValue(noCallback?: boolean): void;
    getValue(): number;
    getIndex(): number;
    getStaticData(): any;
    refresh(): void;
    printError(msg: string): void;
    mounted(): void;
    beforeDestroy(): void;
}
